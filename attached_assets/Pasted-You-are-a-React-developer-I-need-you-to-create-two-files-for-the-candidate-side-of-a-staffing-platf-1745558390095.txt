You are a React developer. I need you to create two files for the candidate side of a staffing platform MVP. All data is stored in `localStorage` and syncs via a shared file (`data-store.js`). The candidate has ID = 1. Use Tailwind CSS for styling. This is part of a staffing workflow system. Include all code inline for each file below:

---

✅ FILE: candidate-dashboard.jsx

import React, { useEffect, useState } from "react";
import { loadCandidates } from "./data-store";
import { useNavigate } from "react-router-dom";

export default function CandidateDashboard() {
  const [candidate, setCandidate] = useState(null);
  const navigate = useNavigate();

  useEffect(() => {
    const candidates = loadCandidates();
    const userId = 1;
    const found = candidates.find((c) => c.id === userId);
    setCandidate(found);
  }, []);

  if (!candidate) return <div className="p-4">Loading...</div>;

  return (
    <div className="p-4 space-y-4">
      <h2 className="text-xl font-bold">Welcome, {candidate.name}</h2>
      <p>Job Applied: {candidate.job}</p>
      <p>Status: <strong>{candidate.status}</strong></p>
      <div className="my-2 bg-gray-100 rounded-full h-2">
        <div
          className="bg-blue-500 h-2 rounded-full"
          style={{ width: `${(candidate.onboardingStep / candidate.totalSteps) * 100}%` }}
        ></div>
      </div>
      <button
        onClick={() => navigate("/onboarding-flow")}
        className="px-4 py-2 bg-blue-600 text-white rounded"
      >
        Continue Onboarding
      </button>
    </div>
  );
}

---

✅ FILE: onboarding-flow.jsx

import React, { useEffect, useState } from "react";
import { loadCandidates, updateOnboardingData, updateCandidate } from "./data-store";
import { useNavigate } from "react-router-dom";

export default function OnboardingFlow() {
  const [step, setStep] = useState(1);
  const [form, setForm] = useState({});
  const [candidate, setCandidate] = useState(null);
  const navigate = useNavigate();

  useEffect(() => {
    const candidates = loadCandidates();
    const userId = 1;
    const found = candidates.find((c) => c.id === userId);
    setCandidate(found);
    setForm(found?.onboardingData || {});
  }, []);

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setForm((prev) => ({ ...prev, [name]: type === "checkbox" ? checked : value }));
  };

  const nextStep = () => {
    updateOnboardingData(candidate.id, form);
    updateCandidate(candidate.id, { onboardingStep: step + 1 });
    setStep((prev) => prev + 1);
  };

  const handleFinalSubmit = () => {
    updateOnboardingData(candidate.id, form);
    updateCandidate(candidate.id, { status: "Onboarding Complete", onboardingStep: 5 });
    navigate("/candidate-dashboard");
  };

  const renderStep = () => {
    switch (step) {
      case 1:
        return (
          <div className="space-y-2">
            <input name="fullName" placeholder="Full Name" value={form.fullName || ""} onChange={handleChange} className="block w-full p-2 border rounded" />
            <input name="email" placeholder="Email" value={form.email || ""} onChange={handleChange} className="block w-full p-2 border rounded" />
            <input name="phone" placeholder="Phone" value={form.phone || ""} onChange={handleChange} className="block w-full p-2 border rounded" />
            <select name="language" value={form.language || ""} onChange={handleChange} className="block w-full p-2 border rounded">
              <option value="">Preferred Language</option>
              <option value="English">English</option>
              <option value="Spanish">Spanish</option>
            </select>
          </div>
        );
      case 2:
        return (
          <div className="space-y-2">
            <input name="address" placeholder="Home Address" value={form.address || ""} onChange={handleChange} className="block w-full p-2 border rounded" />
            <input name="taxId" placeholder="SSN or Tax ID" value={form.taxId || ""} onChange={handleChange} className="block w-full p-2 border rounded" />
            <select name="eligibility" value={form.eligibility || ""} onChange={handleChange} className="block w-full p-2 border rounded">
              <option value="">Work Eligibility</option>
              <option value="Citizen">Citizen</option>
              <option value="Green Card">Green Card</option>
              <option value="Visa">Visa</option>
            </select>
          </div>
        );
      case 3:
        return (
          <div className="space-y-2">
            <input name="bankName" placeholder="Bank Name" value={form.bankName || ""} onChange={handleChange} className="block w-full p-2 border rounded" />
            <input name="routing" placeholder="Routing Number" value={form.routing || ""} onChange={handleChange} className="block w-full p-2 border rounded" />
            <input name="account" placeholder="Account Number" value={form.account || ""} onChange={handleChange} className="block w-full p-2 border rounded" />
            <label className="block">
              <input type="checkbox" name="reimbursement" checked={form.reimbursement || false} onChange={handleChange} className="mr-2" />
              Use same account for reimbursements
            </label>
          </div>
        );
      case 4:
        return (
          <div className="space-y-2">
            <p>Simulated Upload: Driver's License, SS Card, Voided Check</p>
            <label className="block">
              <input type="checkbox" name="docsUploaded" checked={form.docsUploaded || false} onChange={handleChange} className="mr-2" />
              I have uploaded all required documents
            </label>
            <label className="block">
              <input type="checkbox" name="eSigned" checked={form.eSigned || false} onChange={handleChange} className="mr-2" />
              I agree to the terms and sign electronically
            </label>
          </div>
        );
      case 5:
        return (
          <div className="space-y-2">
            <p>Please review your info and click submit to finalize onboarding.</p>
            <pre className="bg-gray-100 p-2 rounded text-sm overflow-x-auto">{JSON.stringify(form, null, 2)}</pre>
          </div>
        );
      default:
        return null;
    }
  };

  return (
    <div className="p-4 space-y-4">
      <h2 className="text-xl font-bold">Onboarding - Step {step} of 5</h2>
      {renderStep()}
      <div className="flex justify-between">
        {step > 1 && <button onClick={() => setStep(step - 1)} className="px-4 py-2 bg-gray-300 rounded">Back</button>}
        {step < 5 && <button onClick={nextStep} className="px-4 py-2 bg-blue-600 text-white rounded">Next</button>}
        {step === 5 && <button onClick={handleFinalSubmit} className="px-4 py-2 bg-green-600 text-white rounded">Submit</button>}
      </div>
    </div>
  );
}
