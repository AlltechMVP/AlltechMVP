Claude, please help me extend my Alltech app by building full mock versions of:

1. Recruiter Candidate Preview Dashboard
2. Client Candidate Review Dashboard

Use only mock data for now (no Supabase yet). Create the following:

---

1. ✅ Create a new file: recruiter.html

Paste this code:

<!DOCTYPE html>
<html>
<head>
    <title>Recruiter Dashboard</title>
    <script src="js/recruiter.js" defer></script>
    <link rel="stylesheet" href="css/styles.css" />
</head>
<body>
    <main>
        <h2>Recruiter Dashboard</h2>
        <div id="candidateList"></div>
    </main>
</body>
</html>

---

2. ✅ Create a new file: js/recruiter.js

Paste this code:

const candidates = JSON.parse(localStorage.getItem("mockCandidates")) || [];

function renderCandidates() {
    const list = document.getElementById("candidateList");
    list.innerHTML = "";

    candidates.forEach((c, index) => {
        const div = document.createElement("div");
        div.style = "border:1px solid #ccc;padding:1rem;margin-bottom:1rem;border-radius:8px;";

        div.innerHTML = `
            <strong>${c.name}</strong> (${c.email})<br>
            Job: ${c.job}<br>
            Availability: ${c.availability}<br>
            Resume: ${c.resume}<br>
            Onboarding: ${c.completedSteps || 0}/4 steps completed<br><br>
            <button onclick="markReady(${index})">Mark Ready for Submission</button>
            <button onclick="addNote(${index})">Add Note</button>
        `;

        list.appendChild(div);
    });
}

function markReady(index) {
    candidates[index].ready = true;
    saveAndRender();
}

function addNote(index) {
    const note = prompt("Enter note for this candidate:");
    if (note) {
        candidates[index].note = note;
        saveAndRender();
    }
}

function saveAndRender() {
    localStorage.setItem("mockCandidates", JSON.stringify(candidates));
    renderCandidates();
}

window.onload = () => {
    renderCandidates();
};

---

3. ✅ Create a new file: client.html

Paste this code:

<!DOCTYPE html>
<html>
<head>
    <title>Client Dashboard</title>
    <script src="js/client.js" defer></script>
    <link rel="stylesheet" href="css/styles.css" />
</head>
<body>
    <main>
        <h2>Client Candidate Review</h2>
        <div id="reviewList"></div>
    </main>
</body>
</html>

---

4. ✅ Create a new file: js/client.js

Paste this code:

const candidates = JSON.parse(localStorage.getItem("mockCandidates")) || [];

function renderClientView() {
    const list = document.getElementById("reviewList");
    list.innerHTML = "";

    candidates.filter(c => c.ready).forEach((c, index) => {
        const div = document.createElement("div");
        div.style = "border:1px solid #ccc;padding:1rem;margin-bottom:1rem;border-radius:8px;";

        div.innerHTML = `
            <strong>${c.name}</strong> (${c.email})<br>
            Job: ${c.job}<br>
            Resume: ${c.resume}<br><br>
            <button onclick="approve(${index})">Approve</button>
            <button onclick="reject(${index})">Reject</button>
        `;

        list.appendChild(div);
    });
}

function approve(index) {
    candidates[index].clientStatus = "Approved";
    saveAndRender();
}

function reject(index) {
    candidates[index].clientStatus = "Rejected";
    saveAndRender();
}

function saveAndRender() {
    localStorage.setItem("mockCandidates", JSON.stringify(candidates));
    renderClientView();
}

window.onload = () => {
    renderClientView();
};

---

5. ✅ Also, update candidate-apply.js

At the end of the form submission, also push the new candidate into mockCandidates:

Modify the form submit handler like this:

document.getElementById("applicationForm").addEventListener("submit", function (e) {
  e.preventDefault();

  const mockCandidateProfile = {
    name: document.getElementById("name").value.trim(),
    email: document.getElementById("email").value.trim(),
    phone: document.getElementById("phone").value.trim(),
    job: document.getElementById("job").value.trim(),
    availability: document.getElementById("availability").value,
    resume: document.getElementById("resume").files[0]?.name || "Not uploaded",
    completedSteps: 0, // start fresh
    ready: false
  };

  const candidates = JSON.parse(localStorage.getItem("mockCandidates")) || [];
  candidates.push(mockCandidateProfile);
  localStorage.setItem("mockCandidates", JSON.stringify(candidates));
  localStorage.setItem("candidateProfile", JSON.stringify(mockCandidateProfile));

  window.location.href = "onboarding.html";
});

---

✅ This full setup will:

- Allow recruiters to review candidates after application
- Let recruiters mark them ready or add notes
- Allow clients to approve/reject based on recruiter submission
- Keep everything mocked and localStorage-driven for now (no database yet)

Use consistent file naming:
- recruiter.html → js/recruiter.js
- client.html → js/client.js

No Supabase connections yet — mock only.

